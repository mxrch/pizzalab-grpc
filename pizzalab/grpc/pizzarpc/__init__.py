# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: methods.proto, pizza.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class BaseSauce(betterproto.Enum):
    TOMATO_SAUCE = 0
    WHITE_SAUCE = 1
    BURGER_SAUCE = 2


class Topping(betterproto.Enum):
    PEPPERONI = 0
    MUSHROOM = 1
    ONION = 2
    SAUSAGE = 3
    BACON = 4
    EXTRA_CHEESE = 5
    BLACK_OLIVES = 6
    GREEN_PEPPERS = 7
    PINEAPPLE = 8
    SPINACH = 9
    JALAPENOS = 10
    ARTICHOKE = 11
    ANCHOVIES = 12
    CHICKEN = 13
    BEEF = 14
    HAM = 15
    SALAMI = 16
    TOMATO = 17
    GARLIC = 18
    BASIL = 19
    OREGANO = 20
    PARSLEY = 21
    ROSEMARY = 22
    THYME = 23
    RED_PEPPER_FLAKES = 24
    BBQ_SAUCE = 25
    BUFFALO_SAUCE = 26
    RANCH = 27
    BLUE_CHEESE = 28
    PARMESAN = 29
    MOZZARELLA = 30
    CHEDDAR = 31
    FETA = 32
    GOAT_CHEESE = 33
    RICOTTA = 34
    PROVOLONE = 35
    SWISS = 36
    GORGONZOLA = 37
    PARMIGIANO_REGGIANO = 38
    ROMANO = 39
    PECORINO = 40
    GREEK = 41
    CAESAR = 42
    RANCH_DRESSING = 43
    ITALIAN_DRESSING = 44
    BALSAMIC_VINEGAR = 45
    OLIVE_OIL = 46
    RED_WINE_VINEGAR = 47
    WHITE_WINE_VINEGAR = 48
    BALSAMIC_GLAZE = 49
    HONEY_MUSTARD = 50
    THOUSAND_ISLAND = 51
    MAYO = 52
    KETCHUP = 53
    MUSTARD = 54
    BBQ = 55
    BUFFALO = 56


@dataclass(eq=False, repr=False)
class Pizza(betterproto.Message):
    name: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    price: float = betterproto.float_field(3)
    toppings: List["Topping"] = betterproto.enum_field(4)
    base_sauce: "BaseSauce" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class OrderRequest(betterproto.Message):
    pizza_name: str = betterproto.string_field(1)
    customer_name: str = betterproto.string_field(2)
    quantity: int = betterproto.int32_field(3)
    toppings: List["Topping"] = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class OrderResponse(betterproto.Message):
    message: str = betterproto.string_field(1)
    order_id: str = betterproto.string_field(2)
    pizza: "Pizza" = betterproto.message_field(3)
    quantity: int = betterproto.int32_field(4)
    total_price: float = betterproto.float_field(5)
    success: bool = betterproto.bool_field(6)
    error: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class MenuRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MenuResponse(betterproto.Message):
    pizzas: List["Pizza"] = betterproto.message_field(1)


class PizzaServiceStub(betterproto.ServiceStub):
    async def order_pizza(
        self,
        order_request: "OrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrderResponse":
        return await self._unary_unary(
            "/pizzarpc.PizzaService/OrderPizza",
            order_request,
            OrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_menu(
        self,
        menu_request: "MenuRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MenuResponse":
        return await self._unary_unary(
            "/pizzarpc.PizzaService/GetMenu",
            menu_request,
            MenuResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PizzaServiceBase(ServiceBase):

    async def order_pizza(self, order_request: "OrderRequest") -> "OrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_menu(self, menu_request: "MenuRequest") -> "MenuResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_order_pizza(
        self, stream: "grpclib.server.Stream[OrderRequest, OrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.order_pizza(request)
        await stream.send_message(response)

    async def __rpc_get_menu(
        self, stream: "grpclib.server.Stream[MenuRequest, MenuResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_menu(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/pizzarpc.PizzaService/OrderPizza": grpclib.const.Handler(
                self.__rpc_order_pizza,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrderRequest,
                OrderResponse,
            ),
            "/pizzarpc.PizzaService/GetMenu": grpclib.const.Handler(
                self.__rpc_get_menu,
                grpclib.const.Cardinality.UNARY_UNARY,
                MenuRequest,
                MenuResponse,
            ),
        }
